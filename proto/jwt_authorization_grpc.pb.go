// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: proto/jwt_authorization.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	JwtAuthorizationService_UserLogin_FullMethodName                 = "/proto.JwtAuthorizationService/UserLogin"
	JwtAuthorizationService_AdminLogin_FullMethodName                = "/proto.JwtAuthorizationService/AdminLogin"
	JwtAuthorizationService_UserRegister_FullMethodName              = "/proto.JwtAuthorizationService/UserRegister"
	JwtAuthorizationService_RefreshToken_FullMethodName              = "/proto.JwtAuthorizationService/RefreshToken"
	JwtAuthorizationService_UserLogout_FullMethodName                = "/proto.JwtAuthorizationService/UserLogout"
	JwtAuthorizationService_UserFrozen_FullMethodName                = "/proto.JwtAuthorizationService/UserFrozen"
	JwtAuthorizationService_CheckUserPermission_FullMethodName       = "/proto.JwtAuthorizationService/CheckUserPermission"
	JwtAuthorizationService_GetUserPermission_FullMethodName         = "/proto.JwtAuthorizationService/GetUserPermission"
	JwtAuthorizationService_AdminFrozenAccount_FullMethodName        = "/proto.JwtAuthorizationService/AdminFrozenAccount"
	JwtAuthorizationService_AdminThawAccount_FullMethodName          = "/proto.JwtAuthorizationService/AdminThawAccount"
	JwtAuthorizationService_AdminDeleteAccount_FullMethodName        = "/proto.JwtAuthorizationService/AdminDeleteAccount"
	JwtAuthorizationService_AdminCheckPermission_FullMethodName      = "/proto.JwtAuthorizationService/AdminCheckPermission"
	JwtAuthorizationService_AdminGetUserPermission_FullMethodName    = "/proto.JwtAuthorizationService/AdminGetUserPermission"
	JwtAuthorizationService_AdminAddUserPermission_FullMethodName    = "/proto.JwtAuthorizationService/AdminAddUserPermission"
	JwtAuthorizationService_AdminDeleteUserPermission_FullMethodName = "/proto.JwtAuthorizationService/AdminDeleteUserPermission"
)

// JwtAuthorizationServiceClient is the client API for JwtAuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JwtAuthorizationServiceClient interface {
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error)
	UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	UserLogout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*UserLogoutResponse, error)
	UserFrozen(ctx context.Context, in *UserFrozenRequest, opts ...grpc.CallOption) (*UserFrozenResponse, error)
	CheckUserPermission(ctx context.Context, in *UserCheckPermissionRequest, opts ...grpc.CallOption) (*UserCheckPermissionResponse, error)
	GetUserPermission(ctx context.Context, in *UserGetUserPermissionRequest, opts ...grpc.CallOption) (*UserGetUserPermissionResponse, error)
	AdminFrozenAccount(ctx context.Context, in *AdminFrozenAccountRequest, opts ...grpc.CallOption) (*AdminFrozenAccountResponse, error)
	AdminThawAccount(ctx context.Context, in *AdminThawAccountRequest, opts ...grpc.CallOption) (*AdminThawAccountResponse, error)
	AdminDeleteAccount(ctx context.Context, in *AdminDeleteAccountRequest, opts ...grpc.CallOption) (*AdminDeleteAccountResponse, error)
	AdminCheckPermission(ctx context.Context, in *AdminCheckPermissionRequest, opts ...grpc.CallOption) (*AdminCheckPermissionResponse, error)
	AdminGetUserPermission(ctx context.Context, in *AdminGetUserPermissionRequest, opts ...grpc.CallOption) (*AdminGetUserPermissionResponse, error)
	AdminAddUserPermission(ctx context.Context, in *AdminAddUserPermissionRequest, opts ...grpc.CallOption) (*AdminAddUserPermissionResponse, error)
	AdminDeleteUserPermission(ctx context.Context, in *AdminDeleteUserPermissionRequest, opts ...grpc.CallOption) (*AdminDeleteUserPermissionResponse, error)
}

type jwtAuthorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJwtAuthorizationServiceClient(cc grpc.ClientConnInterface) JwtAuthorizationServiceClient {
	return &jwtAuthorizationServiceClient{cc}
}

func (c *jwtAuthorizationServiceClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_UserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...grpc.CallOption) (*AdminLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminLoginResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_AdminLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRegisterResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_UserRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) UserLogout(ctx context.Context, in *UserLogoutRequest, opts ...grpc.CallOption) (*UserLogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLogoutResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_UserLogout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) UserFrozen(ctx context.Context, in *UserFrozenRequest, opts ...grpc.CallOption) (*UserFrozenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFrozenResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_UserFrozen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) CheckUserPermission(ctx context.Context, in *UserCheckPermissionRequest, opts ...grpc.CallOption) (*UserCheckPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCheckPermissionResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_CheckUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) GetUserPermission(ctx context.Context, in *UserGetUserPermissionRequest, opts ...grpc.CallOption) (*UserGetUserPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGetUserPermissionResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_GetUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) AdminFrozenAccount(ctx context.Context, in *AdminFrozenAccountRequest, opts ...grpc.CallOption) (*AdminFrozenAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminFrozenAccountResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_AdminFrozenAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) AdminThawAccount(ctx context.Context, in *AdminThawAccountRequest, opts ...grpc.CallOption) (*AdminThawAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminThawAccountResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_AdminThawAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) AdminDeleteAccount(ctx context.Context, in *AdminDeleteAccountRequest, opts ...grpc.CallOption) (*AdminDeleteAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminDeleteAccountResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_AdminDeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) AdminCheckPermission(ctx context.Context, in *AdminCheckPermissionRequest, opts ...grpc.CallOption) (*AdminCheckPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminCheckPermissionResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_AdminCheckPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) AdminGetUserPermission(ctx context.Context, in *AdminGetUserPermissionRequest, opts ...grpc.CallOption) (*AdminGetUserPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminGetUserPermissionResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_AdminGetUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) AdminAddUserPermission(ctx context.Context, in *AdminAddUserPermissionRequest, opts ...grpc.CallOption) (*AdminAddUserPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminAddUserPermissionResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_AdminAddUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtAuthorizationServiceClient) AdminDeleteUserPermission(ctx context.Context, in *AdminDeleteUserPermissionRequest, opts ...grpc.CallOption) (*AdminDeleteUserPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminDeleteUserPermissionResponse)
	err := c.cc.Invoke(ctx, JwtAuthorizationService_AdminDeleteUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JwtAuthorizationServiceServer is the server API for JwtAuthorizationService service.
// All implementations must embed UnimplementedJwtAuthorizationServiceServer
// for forward compatibility
type JwtAuthorizationServiceServer interface {
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error)
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	UserLogout(context.Context, *UserLogoutRequest) (*UserLogoutResponse, error)
	UserFrozen(context.Context, *UserFrozenRequest) (*UserFrozenResponse, error)
	CheckUserPermission(context.Context, *UserCheckPermissionRequest) (*UserCheckPermissionResponse, error)
	GetUserPermission(context.Context, *UserGetUserPermissionRequest) (*UserGetUserPermissionResponse, error)
	AdminFrozenAccount(context.Context, *AdminFrozenAccountRequest) (*AdminFrozenAccountResponse, error)
	AdminThawAccount(context.Context, *AdminThawAccountRequest) (*AdminThawAccountResponse, error)
	AdminDeleteAccount(context.Context, *AdminDeleteAccountRequest) (*AdminDeleteAccountResponse, error)
	AdminCheckPermission(context.Context, *AdminCheckPermissionRequest) (*AdminCheckPermissionResponse, error)
	AdminGetUserPermission(context.Context, *AdminGetUserPermissionRequest) (*AdminGetUserPermissionResponse, error)
	AdminAddUserPermission(context.Context, *AdminAddUserPermissionRequest) (*AdminAddUserPermissionResponse, error)
	AdminDeleteUserPermission(context.Context, *AdminDeleteUserPermissionRequest) (*AdminDeleteUserPermissionResponse, error)
	mustEmbedUnimplementedJwtAuthorizationServiceServer()
}

// UnimplementedJwtAuthorizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJwtAuthorizationServiceServer struct {
}

func (UnimplementedJwtAuthorizationServiceServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) UserLogout(context.Context, *UserLogoutRequest) (*UserLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogout not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) UserFrozen(context.Context, *UserFrozenRequest) (*UserFrozenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFrozen not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) CheckUserPermission(context.Context, *UserCheckPermissionRequest) (*UserCheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPermission not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) GetUserPermission(context.Context, *UserGetUserPermissionRequest) (*UserGetUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermission not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) AdminFrozenAccount(context.Context, *AdminFrozenAccountRequest) (*AdminFrozenAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminFrozenAccount not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) AdminThawAccount(context.Context, *AdminThawAccountRequest) (*AdminThawAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminThawAccount not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) AdminDeleteAccount(context.Context, *AdminDeleteAccountRequest) (*AdminDeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteAccount not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) AdminCheckPermission(context.Context, *AdminCheckPermissionRequest) (*AdminCheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCheckPermission not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) AdminGetUserPermission(context.Context, *AdminGetUserPermissionRequest) (*AdminGetUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetUserPermission not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) AdminAddUserPermission(context.Context, *AdminAddUserPermissionRequest) (*AdminAddUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAddUserPermission not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) AdminDeleteUserPermission(context.Context, *AdminDeleteUserPermissionRequest) (*AdminDeleteUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteUserPermission not implemented")
}
func (UnimplementedJwtAuthorizationServiceServer) mustEmbedUnimplementedJwtAuthorizationServiceServer() {
}

// UnsafeJwtAuthorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JwtAuthorizationServiceServer will
// result in compilation errors.
type UnsafeJwtAuthorizationServiceServer interface {
	mustEmbedUnimplementedJwtAuthorizationServiceServer()
}

func RegisterJwtAuthorizationServiceServer(s grpc.ServiceRegistrar, srv JwtAuthorizationServiceServer) {
	s.RegisterService(&JwtAuthorizationService_ServiceDesc, srv)
}

func _JwtAuthorizationService_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).AdminLogin(ctx, req.(*AdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_UserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).UserRegister(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_UserLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).UserLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_UserLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).UserLogout(ctx, req.(*UserLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_UserFrozen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFrozenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).UserFrozen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_UserFrozen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).UserFrozen(ctx, req.(*UserFrozenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_CheckUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).CheckUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_CheckUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).CheckUserPermission(ctx, req.(*UserCheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_GetUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).GetUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_GetUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).GetUserPermission(ctx, req.(*UserGetUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_AdminFrozenAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminFrozenAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).AdminFrozenAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_AdminFrozenAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).AdminFrozenAccount(ctx, req.(*AdminFrozenAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_AdminThawAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminThawAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).AdminThawAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_AdminThawAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).AdminThawAccount(ctx, req.(*AdminThawAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_AdminDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).AdminDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_AdminDeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).AdminDeleteAccount(ctx, req.(*AdminDeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_AdminCheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).AdminCheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_AdminCheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).AdminCheckPermission(ctx, req.(*AdminCheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_AdminGetUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).AdminGetUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_AdminGetUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).AdminGetUserPermission(ctx, req.(*AdminGetUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_AdminAddUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminAddUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).AdminAddUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_AdminAddUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).AdminAddUserPermission(ctx, req.(*AdminAddUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtAuthorizationService_AdminDeleteUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtAuthorizationServiceServer).AdminDeleteUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtAuthorizationService_AdminDeleteUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtAuthorizationServiceServer).AdminDeleteUserPermission(ctx, req.(*AdminDeleteUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JwtAuthorizationService_ServiceDesc is the grpc.ServiceDesc for JwtAuthorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JwtAuthorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JwtAuthorizationService",
	HandlerType: (*JwtAuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _JwtAuthorizationService_UserLogin_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _JwtAuthorizationService_AdminLogin_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _JwtAuthorizationService_UserRegister_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _JwtAuthorizationService_RefreshToken_Handler,
		},
		{
			MethodName: "UserLogout",
			Handler:    _JwtAuthorizationService_UserLogout_Handler,
		},
		{
			MethodName: "UserFrozen",
			Handler:    _JwtAuthorizationService_UserFrozen_Handler,
		},
		{
			MethodName: "CheckUserPermission",
			Handler:    _JwtAuthorizationService_CheckUserPermission_Handler,
		},
		{
			MethodName: "GetUserPermission",
			Handler:    _JwtAuthorizationService_GetUserPermission_Handler,
		},
		{
			MethodName: "AdminFrozenAccount",
			Handler:    _JwtAuthorizationService_AdminFrozenAccount_Handler,
		},
		{
			MethodName: "AdminThawAccount",
			Handler:    _JwtAuthorizationService_AdminThawAccount_Handler,
		},
		{
			MethodName: "AdminDeleteAccount",
			Handler:    _JwtAuthorizationService_AdminDeleteAccount_Handler,
		},
		{
			MethodName: "AdminCheckPermission",
			Handler:    _JwtAuthorizationService_AdminCheckPermission_Handler,
		},
		{
			MethodName: "AdminGetUserPermission",
			Handler:    _JwtAuthorizationService_AdminGetUserPermission_Handler,
		},
		{
			MethodName: "AdminAddUserPermission",
			Handler:    _JwtAuthorizationService_AdminAddUserPermission_Handler,
		},
		{
			MethodName: "AdminDeleteUserPermission",
			Handler:    _JwtAuthorizationService_AdminDeleteUserPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/jwt_authorization.proto",
}
